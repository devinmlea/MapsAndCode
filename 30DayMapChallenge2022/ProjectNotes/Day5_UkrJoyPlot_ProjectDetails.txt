###########################################################
###########################################################

Ukraine Joy Plot
Author: Devin Lea

Date project started: 10/30/2022
Last updated: 11/3/2022

Licensing: This map is licensed by the author (Devin Lea)
under Creative Commons Attribution-Noncommercial-ShareAlike 3.0
(CC BY-NC-SA 3.0). What this means is you can take this map and
reshare it or reproduce/remix it for noncommercial purposes,
but please attribute me if you do so, and contact me if you wish
to use the map for commercial purposes.

This document is broken into the following sections:
- Project Goal
- Project Replication
- Data Acquisition + Prep
- Data Modification and Visualization

Software used for this project:
- R
- QGIS
- Adobe Illustrator


###########################################################
Project Goal
###########################################################

One goal is to use this for my Ukraine map for #30DayMapChallenge

I also have wanted to try out joy mapping for a while and liked
the idea of trying it for Ukraine


###########################################################
Project Replication
###########################################################

If you would like to replicate this project, I have detailed the software I used and
actions I performed in the sections below that you can follow to re-create my product.

I used a couple sources to help guide me in the production of my own joy plot:

1) Helen McKenzie's "How-To: Joy Plot" blog post:
https://www.helenmakesmaps.com/post/how-to-joy-plot

2) Travis White's article on how to make joy plots:
https://cartographicperspectives.org/index.php/journal/article/view/1536/1725

3) Diego HernangÃ³mez's guide on how to create joy plots in R:
https://dieghernan.github.io/202205_Unknown-pleasures-R/

Thanks Helen, Travis, and Diego!

###########################################################
Data Acquisition + Prep
###########################################################

This section describes the data acquired to create the map and any alterations
I made to the data. For information about displaying the map, see the Data
Visualization section.

There were three data sources I acquired:
1) Natural Earth 1:50m countries shapefile (shapefile)
2) Gridded population estimates for Ukraine, 2020, 1km (.tif)
3) Ukraine polygon in R via giscoR (polygon)


1) Downloaded 1:50m scale cultural vectors at link:
https://www.naturalearthdata.com/downloads/50m-cultural-vectors/
Unzipped and loaded into QGIS


2) Gridded population estimates for Ukraine, 2020, 1km (.tif)
Obtained this data from WorldPop Research Group at the following link:
https://data.humdata.org/dataset/gridded-population-estimates-for-ukraine-using-un-cod-ps-estimates-2020-version-1-0?
I downloaded the file: ukr_population_2020_1km_unconstrained_v1_0.zip and unzipped


3) Ukraine polygon in R via giscoR (polygon)
I acquired this layer as part of using giscoR package in R. I will describe more in the data
visualization section.


###########################################################
Data Visualization
###########################################################

To begin, opened QGIS and loaded in the data layers

In QGIS, selected Ukraine polygon from 1:50m countries and used Export -> Save Selected Features As
and saved as new shapefile named UkraineShapefile.

Because I was using population data, I needed to do a couple of things first to get it into
a useable format for creating a joy plot.

First, I had to deal with raster cells that were no data because they were outside Ukraine
border or were water. To do this I used the GRASS tool r.null in QGIS. Within this tool my inputs:
List of cell values to be set to NULL = -99999
The value to replace the null value by = 0.0
Raster Output name = UkrainePopNoNulls
This replaced null values with 0s

Next, I wanted to resample (aggregate) the data to larger pixel sizes so the data would stand out more
To do this I used the GRASS tool r.resamp.stats in QGIS. Within the tool my inputs:
aggregation method = sum
region cellsize (Resample size) = 0.05 
(This makes size equivalent with vertical spacing of lines I decided to use)
Raster Output name = UkrainePopResample

Now with my population raster ready, for the QGIS steps I followed a mix of
Helen McKenzie's "How-To: Joy Plot" blog post and Travis White's post about joy plots:
https://www.helenmakesmaps.com/post/how-to-joy-plot
https://cartographicperspectives.org/index.php/journal/article/view/1536/1725

First, given I was focusing on Ukraine, I decided I wanted to create a unique
projection that would best display my study area. I got this idea from Travis's post.
I also consulted the QGIS documentation how to do this:
https://docs.qgis.org/2.18/en/docs/user_manual/working_with_projections/working_with_projections.html

Following Travis's lead, I decided to use a sinusoidal transformation. My parameters for QGIS
unique projection creation were as follows:
+proj=sinu +lon_0=30 +x_0=0 +y_0=0 +ellps=WGS84 +units=m +no_defs

I then used Create Grid tool in QGIS. Changed grid type to line and set grid extent to use map
canvas extent. The horizontal extent I set pretty high relative for my units (like 200km)
while vertical extent was 5.5km so it would be a line for every row of pixels.
After running the tool, I deleted vertical lines.

I then used Vector > Geoprocessing Tools > Clip tool to clip the lines to my 1:50m polygon

Next, I used the tool "Generate Points (Pixel Centroids) Along Line" to create a point for
each pixel within Ukraine area.

I then joined population data to these points using the "Point Sampling Tool", which as
Helen describes is part of a plugin you need to first install. After running the tool and
getting elevation for the points, I then used the "Add X/Y fields to layer" tool
(under Vector table) to add lat and lon coordinates for each point. I then exported these
data as a .csv file


After this I initially followed the steps described by Helen and Travis to try and create
my joy plot in R. I was able to get a plot, but I realized that because the coordinates
were not being projected Ukraine did not look like I expected (see for example unprojected
vs. projected of New Zealand here: https://ggplot2.tidyverse.org/reference/coord_map.html)

I tried to implement coordmap() as described by Travis, but was unsuccessful and also realized
looking into further ggplot2 docs that this has been depreciated in favor of geom_sf()
(see: https://ggplot2.tidyverse.org/reference/ggsf.html). This was when I looked around for
other sources and found Diego's guide and use of geom_sf():
https://dieghernan.github.io/202205_Unknown-pleasures-R/

After a bit of trial and error, I decided that my best course of action would be to access
giscoR as Diego does in their guide and use data there of Ukraine to create my joy plot
as part of using geom_sf().
giscoR is an API package that helps to retrieve data from Eurostat - GISCO (the
Geographic Information System of the COmmission). More here:
https://ropengov.github.io/giscoR/

So between my three guides I was able to produce R code to create my initial output
of a joy plot. The code is provided below:

############################################################
Start of Rstats code:

#install.packages("ggridges")
#install.packages("mapproj")
#install.packages("giscoR")
#install.packages("sf")
#install.packages("dplyr")
#install.packages("units")

# load packages
library(ggplot2)
library(ggridges)
library(mapproj)
library(giscoR)
library(sf)
library(dplyr)
library(units)

# get 1:10m polygon of Ukraine from GISCO
UKR_res10 <- gisco_get_countries(resolution = "10", country = "UKR")
# transform Ukraine polygon to my custom projection parameters
st_transform(UKR_res10,"+proj=sinu +lon_0=30 +x_0=0 +y_0=0 +ellps=WGS84 +units=m +no_defs")
# test view Ukraine polygon
ggplot(UKR_res10) + geom_sf(fill = "tomato")

# load csv data
transects <- read.csv("C:/filepath/UkrPopCoords.csv")

# load names of data fields
head(transects)

# Rename headers
names(transects)[1] <- "ID"
names(transects)[2] <- "Pop"
names(transects)[3] <- "Lon"
names(transects)[4] <- "Lat"
head(transects)

# remove "ID" column
transects = subset(transects, select = -c(ID))

# create joy plot
ggplot() + geom_sf(data = UKR_res10, color = "white", fill = NA) + geom_density_ridges(data = transects, aes(x = Lon, y = Lat, group = Lat, height = Pop), stat = "identity", scale = 20, fill = "black", color = "white", size = 0.25) +
  theme_void() + theme(plot.background = element_rect(fill = "black"))

end Rstats code
############################################################

Note that because I had population data instead of data in same units as Lat and Lon (like in Diego's example)
that I had to use geom_data_ridges() instead of Diego's use of geom_ridgeline()

One problem still with this joy plot was that lines were being put across areas where Ukraine was not if
they were on same parallel/latitude line but separated. There was also issue that at borders where high
pop spiked but didn't have falling side. I didn't know a way to deal with these problems in R, so I
exported the map and edited the map in Adobe Illustrator to get the desired output. I also edited so the
black fill between joy plot lines was partially (80% opacity) transparent so the outline of Ukraine
and lines behind high peaks could faintly still be seen. Finally, I colored the lines yellow and blue
in alternating fashion using Ukraine flag colors: Blue(Hex: 0057B7) and Yellow(Hex: FFDD00) for most 
of the country. For Crimea, I alternated the Ukraine colors with Russian Flag colors: White (Hex: FFFFFF),
Blue (Hex: 1C3578) and Red (Hex: E4181C) to note its disputed status between Russian control yet many
other countries that argue Crimea is part of Ukraine.

Finally, I added text. I used Helvetica, since this was same font as used on original Unknown Pleasures
album cover by Joy Division. If you need a free download of the font, I got mine at the link below:
https://boldfonts.com/helvetica-font/#google_vignette